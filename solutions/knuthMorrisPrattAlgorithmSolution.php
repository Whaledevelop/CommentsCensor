<?php
  /**
   * Префикс функция используется для формирования массива $pi, который хранит
   * значения совпадений префиксов и суффиксов для образов этой подстроки разной длины.
   * Эти значения используются для эффективного сдвига образа вдоль строки.
  */
  function prefixFunction(string $pattern) {
    $pi = [0];  //первое значение всегда равно нулю, независимо от образа
    $j = 0;     //j - индекс начала рассматриваемого образа
    $i = 1;     // i - индекс конца рассматриваемого образа
    while($i < strlen($pattern)) { // проходим по каждому символу подстроки
      if ($pattern[$i] === $pattern[$j]) {
        $pi[$i] = $j + 1; // записываем длину совпадающих префикса и суффикса
        // продвигаем индексы i и j далее по строке и образу соответственно
        $i++;
        $j++;
      } else if ($j === 0) {
        // если символы не равны и в позиции до этого символы не были равны, то
        // префикс и суффикс не равны, т.е. длина совпадения 0
        $pi[$i] = 0;
        $i++;
      } else {
        // если символы не равны, но по предыдущему j символы равны, то
        // в следующей итерации проверяем сходство с символом перед концом 
        // предыдущего префикса
        $j = $pi[$j - 1]; 
      }
    } 
    return $pi;
  }

  /**
   * Алгоритм Кнута-Морриса-Пратта (КМП) похож на прямой (наивный) поиск, 
   * но КМП для нахождения подстроки в строке позволяет сделать сдвиги более,
   * чем на один символ, что делает код более эффективным в случае
   * частичного совпадения образа и строки, когда нужно вернуться на несколько 
   * символов назад.
  */
  function knuthMorrisPrattAlgorithmSolution(string $string, array $patterns) {
    foreach ($patterns as $pattern) {
      $i = 0;  // индекс символа в строке    
      $j = 0; // индекс символа в образе 

      while ($i < strlen($string)) {
        // Подразумевается, что паттерн уже приведен к нижнему регистру.
        if (strtolower($string[$i]) === $pattern[$j]) {
          $i++;
          $j++;
          if ($j === strlen($pattern)) { 
            // если индекс символа дошел до конца образа, значит 
            // подстрока найдена
            $string = substr_replace($string, "*", $i - $j, $j);
          }
        } else if ($j === 0) {
          // если совпадение не обнаружено, то просто передвигаем индекс
          $i++;
        } else {
          // главная особенность КМП алгоритма, позволяющая пропустить
          // ранее проверенные символы. Принцип основан на том, что префикс
          // и суффикс равны, т.е. мы можем сразу перейти к тому месту, которое
          // частично совпало с предыдущим образом
          $j = prefixFunction($pattern)[$j-1];
        }
      }
    }  
    return $string;  
  }
?>